{"ast":null,"code":"var _jsxFileName = \"/Users/heather/Development/code/phase-2/Project/APP-JOURNAL/src/IdeaForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IdeaForm = ({\n  addIdea\n}) => {\n  _s();\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const handleSubmit = e => {\n    e.preventDefault();\n    addIdea({\n      title,\n      description\n    });\n    setTitle('');\n    setDescription('');\n  };\n  const saveIdeas = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/ideas', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          addIdea\n        })\n      });\n      if (response.ok) {\n        console.log('Ideas saved');\n      } else {\n        console.error('Failed to save:', response.status);\n      }\n    } catch (error) {\n      console.error('Error saving:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"App Name\",\n      value: title,\n      onChange: e => setTitle(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      placeholder: \"Description\",\n      value: description,\n      onChange: e => setDescription(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      variant: \"contained\",\n      children: \"Add Idea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(IdeaForm, \"1UKQWTfo2RWmkwPNsekAdQbvqFk=\");\n_c = IdeaForm;\nexport default IdeaForm;\nvar _c;\n$RefreshReg$(_c, \"IdeaForm\");","map":{"version":3,"names":["React","useState","Button","jsxDEV","_jsxDEV","IdeaForm","addIdea","_s","title","setTitle","description","setDescription","handleSubmit","e","preventDefault","saveIdeas","response","fetch","method","headers","body","JSON","stringify","ok","console","log","error","status","onSubmit","children","type","placeholder","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","variant","_c","$RefreshReg$"],"sources":["/Users/heather/Development/code/phase-2/Project/APP-JOURNAL/src/IdeaForm.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Button from '@mui/material/Button';\n\nconst IdeaForm = ({ addIdea }) => {\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    addIdea({ title, description });\n    setTitle('');\n    setDescription('');\n  };\n\n  const saveIdeas = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/ideas', {\n        method: 'POST',\n        headers: {'Content-Type': 'application/json',},\n        body: JSON.stringify({ addIdea }),\n      });\n      if (response.ok) {\n        console.log('Ideas saved');\n      } else {\n        console.error('Failed to save:', response.status);\n      }\n    } catch (error) {\n      console.error('Error saving:', error);\n    }\n  };\n\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        placeholder=\"App Name\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n      />\n      <textarea\n        placeholder=\"Description\"\n        value={description}\n        onChange={(e) => setDescription(e.target.value)}\n      />\n      <Button variant=\"contained\">Add Idea</Button>\n    </form>\n  );\n};\n\nexport default IdeaForm;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,MAAM,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAQ,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMW,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBR,OAAO,CAAC;MAAEE,KAAK;MAAEE;IAAY,CAAC,CAAC;IAC/BD,QAAQ,CAAC,EAAE,CAAC;IACZE,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC;EAED,MAAMI,SAAS,GAAG,MAAAA,CAAA,KAAY;IAC5B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;QAC1DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAC,cAAc,EAAE;QAAmB,CAAC;QAC9CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEhB;QAAQ,CAAC;MAClC,CAAC,CAAC;MACF,IAAIU,QAAQ,CAACO,EAAE,EAAE;QACfC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC5B,CAAC,MAAM;QACLD,OAAO,CAACE,KAAK,CAAC,iBAAiB,EAAEV,QAAQ,CAACW,MAAM,CAAC;MACnD;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdF,OAAO,CAACE,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC;EACF,CAAC;EAGD,oBACEtB,OAAA;IAAMwB,QAAQ,EAAEhB,YAAa;IAAAiB,QAAA,gBAC3BzB,OAAA;MACE0B,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,UAAU;MACtBC,KAAK,EAAExB,KAAM;MACbyB,QAAQ,EAAGpB,CAAC,IAAKJ,QAAQ,CAACI,CAAC,CAACqB,MAAM,CAACF,KAAK;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C,CAAC,eACFlC,OAAA;MACE2B,WAAW,EAAC,aAAa;MACzBC,KAAK,EAAEtB,WAAY;MACnBuB,QAAQ,EAAGpB,CAAC,IAAKF,cAAc,CAACE,CAAC,CAACqB,MAAM,CAACF,KAAK;IAAE;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,eACFlC,OAAA,CAACF,MAAM;MAACqC,OAAO,EAAC,WAAW;MAAAV,QAAA,EAAC;IAAQ;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACzC,CAAC;AAEX,CAAC;AAAC/B,EAAA,CA7CIF,QAAQ;AAAAmC,EAAA,GAARnC,QAAQ;AA+Cd,eAAeA,QAAQ;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}